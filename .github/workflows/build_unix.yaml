name: Build Native

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build (e.g. 2025.4.2)'
        required: true
  workflow_run:
    workflows: ["New cloudflared Release"]
    types: [completed]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: freebsd
            assetName: cloudflared-freebsd14-amd64
          - os: netbsd
            assetName: cloudflared-netbsd10-amd64
          - os: openbsd
            assetName: cloudflared-openbsd7-amd64
    env:
      GOEXPERIMENT: "noboringcrypto"
      CGO_ENABLED: 0
    steps:

      - name: Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.event.release.tag_name }}
          fetch-depth: 0
          fetch-tags: true

      # Build step for FreeBSD
      - name: Build from Source on FreeBSD
        if: matrix.os == 'freebsd'
        uses: vmactions/freebsd-vm@v1
        with:
          release: "14.2"
          envs: "GOEXPERIMENT CGO_ENABLED"
          usesh: true
          mem: 4096
          prepare: |
            pkg install -y gmake sudo bash git go golangci-lint curl wget fakeroot libffi rubygem-fpm
            git config --global --add safe.directory /home/runner/work/cloudflared/cloudflared
          run: |
            gmake install-go
            go mod download
            go mod tidy
            go install golang.org/x/tools/cmd/goimports@latest
            gmake cloudflared cleanup-go

      # Build step for NetBSD
      - name: Build from Source on NetBSD
        if: matrix.os == 'netbsd'
        uses: vmactions/netbsd-vm@v1
        with:
          envs: "GOEXPERIMENT CGO_ENABLED"
          usesh: true
          mem: 4096
          prepare: |
            export PATH=/usr/sbin:$PATH
            export PKG_PATH=ftp://ftp.netbsd.org/pub/pkgsrc/packages/NetBSD/amd64/10.1/All
            pkg_add -U pkgin
            pkgin -y install gmake sudo bash git go golangci-lint curl wget fakeroot libffi ruby32 pkg_alternatives
            pkg_alternatives rebuild
            gem install fpm
            git config --global --add safe.directory /home/runner/work/cloudflared/cloudflared
          run: |
            gmake install-go
            go mod download
            go mod tidy
            go install golang.org/x/tools/cmd/goimports@latest
            gmake cloudflared cleanup-go

      # Build step for OpenBSD
      - name: Build from Source on OpenBSD
        if: matrix.os == 'openbsd'
        uses: vmactions/openbsd-vm@v1
        with:
          envs: "GOEXPERIMENT CGO_ENABLED"
          usesh: true
          mem: 4096
          prepare: |
            pkg_add -xaz gmake sudo-- bash git go curl wget fakeroot libffi ruby-33
            gem33 install fpm
            git config --global --add safe.directory /home/runner/work/cloudflared/cloudflared
          run: |
            gmake install-go
            go mod download
            go mod tidy
            go install golang.org/x/tools/cmd/goimports@latest
            gmake cloudflared cleanup-go

      - name: Upload build to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: cloudflared
          asset_name: ${{ matrix.assetName }}
          asset_content_type: application/octet-stream

      - name: Upload build to GitHub Release (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release upload "${{ github.event.inputs.tag }}" \
            cloudflared \
            --clobber \
            --name ${{ matrix.assetName }} \
            --content-type application/octet-stream