name: Stage cloudflared Release

on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest upstream release info
        id: get_release
        run: |
          echo "Fetching latest release info from cloudflare/cloudflared..."
          release_info=$(curl -s https://api.github.com/repos/cloudflare/cloudflared/releases/latest)
          tag=$(echo "$release_info" | jq -r .tag_name)
          title=$(echo "$release_info" | jq -r .name)
          echo "Latest tag: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "title=$title" >> $GITHUB_OUTPUT

      - name: Check current version
        id: check_version
        run: |
          if [ -f RELEASE_NOTES ]; then
            current_version=$(head -n1 RELEASE_NOTES)
          else
            current_version=""
          fi
          echo "Current version: $current_version"
          echo "New version: ${{ steps.get_release.outputs.tag }}"
          if [ "$current_version" = "${{ steps.get_release.outputs.tag }}" ]; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
            echo "New version detected. Proceeding with update."
          fi

      - name: Add upstream remote and fetch tag
        if: steps.check_version.outputs.up_to_date == 'false'
        run: |
          git remote add upstream https://github.com/cloudflare/cloudflared.git || true
          git fetch upstream tag ${{ steps.get_release.outputs.tag }} --depth=1
          git sparse-checkout init --cone
          git sparse-checkout set "*" "!.github/workflows/"
          git read-tree -mu HEAD
          git checkout -b update-cloudflared-${{ steps.get_release.outputs.tag }} FETCH_HEAD

      - name: Push branch to origin
        if: steps.check_version.outputs.up_to_date == 'false'
        run: |
          git push origin update-cloudflared-${{ steps.get_release.outputs.tag }} --force

      - name: Open pull request to merge update into master
        env:
          TAG: ${{ steps.get_release.outputs.tag }}
          NEW_BRANCH: update-cloudflared-${{ steps.get_release.outputs.tag }}
        if: steps.check_version.outputs.up_to_date == 'false'
        id: create_pr
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const newBranch = process.env.NEW_BRANCH;
            const tag = process.env.TAG;
            const prTitle = `Update cloudflared to ${tag}`;
            const prBody = `This PR merges changes from ${newBranch} into master.`;
            const { data: pullRequest } = await github.rest.pulls.create({
              owner,
              repo,
              head: newBranch,
              base: 'master',
              title: prTitle,
              body: prBody
            });
            console.log(`Created PR: ${pullRequest.html_url}`);
            await github.rest.issues.addAssignees({
              owner,
              repo,
              issue_number: pullRequest.number,
              assignees: [owner]
            });
            console.log(`Assigned ${owner} as PR assignee.`);
            return { pr_number: pullRequest.number };

      - name: Set PR_NUMBER environment variable
        if: steps.check_version.outputs.up_to_date == 'false'
        run: echo "PR_NUMBER=${{ steps.create_pr.outputs.pr_number }}" >> $GITHUB_ENV

      - name: Auto merge pull request if mergeable
        env:
          TAG: ${{ steps.get_release.outputs.tag }}
        if: steps.check_version.outputs.up_to_date == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = parseInt(process.env.PR_NUMBER);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let pr;
            let mergeable;
            let attempts = 0;
            // Poll for up to 10 attempts (approx. 100 seconds total)
            while (attempts < 10) {
              pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: pr_number
              });
              mergeable = pr.data.mergeable;
              if (mergeable !== null) {
                console.log(`Mergeable status determined: ${mergeable}`);
                break;
              }
              attempts++;
              console.log(`Mergeable is null. Waiting 10 seconds (attempt ${attempts})...`);
              await new Promise(r => setTimeout(r, 10000));
            }
            if (mergeable === true) {
              console.log("PR is mergeable. Merging PR...");
              const mergeResult = await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: pr_number,
                merge_method: 'merge'
              });
              console.log(`Merge result: ${mergeResult.data.message}`);
            } else if (mergeable === false) {
              console.log("PR is not mergeable. Not merging automatically.");
            } else {
              console.log("Mergeable status could not be determined in time. Exiting without merge.");
            }

      - name: Create new Release if PR merged
        env:
          TAG: ${{ steps.get_release.outputs.tag }}
          TITLE: ${{ steps.get_release.outputs.title }}
        if: steps.check_version.outputs.up_to_date == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = parseInt(process.env.PR_NUMBER);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Re-fetch the pull request to verify merged status.
            const { data: pullRequest } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pr_number
            });
            if (pullRequest.merged) {
              console.log("PR has been merged. Creating a new release.");
              const tag = process.env.TAG;
              const title = process.env.TITLE;
              const { data: release } = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                name: title,
                body: `Release ${tag}: ${title}`
              });
              console.log(`Created release: ${release.html_url}`);
            } else {
              console.log("PR is not merged. Skipping release creation.");
            }
