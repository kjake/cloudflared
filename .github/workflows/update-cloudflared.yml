name: Stage cloudflared Release

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout customizations branch
        uses: actions/checkout@v4
        with:
          ref: customizations
          fetch-depth: 0

      - name: Disable .gitattributes enforcement
        run: git config core.attributesFile /dev/null

      - name: Get latest upstream release info
        id: get_release
        run: |
          echo 'Fetching latest release tag from cloudflare/cloudflared...'
          release=$(curl -s https://api.github.com/repos/cloudflare/cloudflared/releases/latest)
          tag=$(echo "$release" | jq -r .tag_name)
          title=$(echo "$release" | jq -r .name)
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "title=$title" >> $GITHUB_OUTPUT

      - name: Export tag and title
        run: |
          echo "TAG=${{ steps.get_release.outputs.tag }}" >> $GITHUB_ENV
          echo "TITLE=${{ steps.get_release.outputs.title }}" >> $GITHUB_ENV

      - name: Check if already up-to-date
        id: check_version
        run: |
          last=$(git tag --sort=-creatordate | grep -E '^release-' | head -n1 | sed 's/^release-//')
          echo "current=$last" >> $GITHUB_OUTPUT
          if [ "$last" = "${{ env.TAG }}" ]; then
            echo 'up_to_date=true' >> $GITHUB_OUTPUT
          else
            echo 'up_to_date=false' >> $GITHUB_OUTPUT
          fi

      - name: Prepare release branch
        if: steps.check_version.outputs.up_to_date == 'false'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          branch="release-${TAG}"
          git checkout -b "$branch"
          git remote add upstream https://github.com/cloudflare/cloudflared.git || true
          git fetch upstream tag "$TAG" --depth=1
          # Merge upstream tag, record conflicts for review
          git merge --no-ff FETCH_HEAD --allow-unrelated-histories -m "chore: merge upstream $TAG" || echo 'Merge conflicts recorded for review'
          # Stage and commit conflict markers if any
          git add -A
          git commit -m "chore: merge upstream $TAG (conflicts for manual review)" || echo 'No conflict commit needed'
          # Restore custom workflows
          git checkout customizations -- .github/workflows || true
          git add .github/workflows
          git commit -m "chore: restore custom workflows" || echo 'No workflows to restore'
          git push --force origin "$branch"

      - name: Open pull request
        if: steps.check_version.outputs.up_to_date == 'false'
        id: create_pr
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = `release-${process.env.TAG}`;
            const { data: pr } = await github.rest.pulls.create({
              owner, repo,
              head: branch,
              base: 'customizations',
              title: `chore: release cloudflared ${process.env.TAG}`,
              body: `Merging upstream release ${process.env.TAG} into customizations. Manual review of conflicts required.`
            });
            return { pr_number: pr.number };