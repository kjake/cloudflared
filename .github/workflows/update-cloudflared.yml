name: Stage cloudflared Release

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Disable .gitattributes attributes
        run: |
          git config core.attributesFile /dev/null

      - name: Get latest upstream release info
        id: get_release
        run: |
          echo 'Fetching latest release info from cloudflare/cloudflared...'
          release_info=$(curl -s https://api.github.com/repos/cloudflare/cloudflared/releases/latest)
          tag=$(echo "$release_info" | jq -r .tag_name)
          title=$(echo "$release_info" | jq -r .name)
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "title=$title" >> $GITHUB_OUTPUT

      - name: Check current version
        id: check_version
        run: |
          current_version=$( [ -f RELEASE_NOTES ] && head -n1 RELEASE_NOTES || echo '' )
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          if [ "$current_version" = "${{ steps.get_release.outputs.tag }}" ]; then
            echo 'up_to_date=true' >> $GITHUB_OUTPUT
          else
            echo 'up_to_date=false' >> $GITHUB_OUTPUT
          fi

      - name: Prepare update branch and merge tag
        if: steps.check_version.outputs.up_to_date == 'false'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          # Start from master
          git fetch origin master
          git checkout -b update-cloudflared-${{ steps.get_release.outputs.tag }} origin/master
          # Add upstream remote and fetch the release tag
          git remote add upstream https://github.com/cloudflare/cloudflared.git || true
          git fetch upstream tag ${{ steps.get_release.outputs.tag }} --depth=1
          # Merge the fetched tag (not a branch) into the current branch
          git merge --no-ff --no-edit ${{ steps.get_release.outputs.tag }}
          # Remove any workflows
          git rm -rf .github/workflows || true
          # Commit merged changes
          git commit -m "chore: update cloudflared to ${{ steps.get_release.outputs.tag }}"

      - name: Push branch to origin
        if: steps.check_version.outputs.up_to_date == 'false'
        run: |
          git push --force origin update-cloudflared-${{ steps.get_release.outputs.tag }}

      - name: Open pull request
        if: steps.check_version.outputs.up_to_date == 'false'
        id: create_pr
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = process.env.TAG;
            const head = `update-cloudflared-${tag}`;
            const title = `chore: update cloudflared to ${tag}`;
            const { data: pr } = await github.rest.pulls.create({ owner, repo, head, base: 'master', title, body: title });
            return { pr_number: pr.number };

      - name: Auto merge PR
        if: steps.check_version.outputs.up_to_date == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const num = parseInt(process.env.PR_NUMBER);
            const { owner, repo } = context.repo;
            for (let i = 0; i < 10; i++) {
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: num });
              if (pr.mergeable !== null) {
                if (pr.mergeable) await github.rest.pulls.merge({ owner, repo, pull_number: num });
                break;
              }
              await new Promise(r => setTimeout(r, 10000));
            }

      - name: Create release
        if: steps.check_version.outputs.up_to_date == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const num = parseInt(process.env.PR_NUMBER);
            const { owner, repo } = context.repo;
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: num });
            if (pr.merged) {
              const tag = process.env.TAG;
              const title = process.env.TITLE;
              await github.rest.repos.createRelease({ owner, repo, tag_name: tag, name: title, body: `Release ${tag}: ${title}` });
            }