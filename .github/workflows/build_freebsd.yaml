name: build_freebsd
on:
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: write
jobs:
  build_freebsd:
    runs-on: ubuntu-latest
    env:
      GOEXPERIMENT: "noboringcrypto"
      CGO_ENABLED: 0
    steps:
      - name: Get Release Details
        id: release_details
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.info(`Building for release tag: ${release.tag_name}`);
            return release;

      - name: Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.release_details.outputs.result.tag_name }}
          fetch-depth: 0
          fetch-tags: true
          set-safe-directory: "/home/runner/work/cloudflared/cloudflared"

      - name: Build from Source on FreeBSD
        id: build_freebsd
        uses: vmactions/freebsd-vm@v1
        with:
          envs: "GOEXPERIMENT CGO_ENABLED"
          usesh: true
          mem: 4096
          # Targeting FreeBSD 14.1 (as used by OPNsense)
          release: "14.1"
          prepare: |
            pkg install -y gmake sudo bash git go golangci-lint curl wget fakeroot libffi rubygem-fpm 
          run: |
            gmake install-go
            go mod download
            go mod tidy
            go install golang.org/x/tools/cmd/goimports@latest
            gmake cloudflared cleanup-go

      - name: Upload Release Asset
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const assetPath = 'cloudflared';
            const assetName = 'cloudflared-freebsd14-amd64';
            // Read the built file from disk.
            const fileData = fs.readFileSync(assetPath);
            // Parse the release details returned by the previous step.
            const release = ${{ steps.release_details.outputs.result }};
            // Upload the asset using the GitHub REST API.
            const { data: asset } = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: assetName,
              data: fileData,
              headers: {
                'content-type': 'application/octet-stream'
              }
            });
            core.info(`Uploaded asset: ${asset.name}`);
            return asset;
